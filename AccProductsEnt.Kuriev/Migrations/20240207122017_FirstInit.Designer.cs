// <auto-generated />
using System;
using AccProductsEnt.Kuriev.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccProductsEnt.Kuriev.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240207122017_FirstInit")]
    partial class FirstInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.AccountCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ImplementationDate")
                        .HasColumnType("date");

                    b.Property<int>("Implemented")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Remainder")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReseiptDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK_AccountCard_Id");

                    b.ToTable("AccountCards");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Accounting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("PriceProduct")
                        .HasColumnType("money");

                    b.Property<int>("WaybillId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_Accounting_");

                    b.ToTable("Accountings");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_Client_Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Implementation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ImplementationDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Implementation_Id");

                    b.HasIndex("StorageId");

                    b.ToTable("Implementations");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("money");

                    b.Property<int>("ImplementationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OrdersDate")
                        .HasColumnType("date");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id")
                        .HasName("PK_Order_Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ImplementationId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobResponsibilities")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Post_Id");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.PriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PricePerPiece")
                        .HasColumnType("money");

                    b.HasKey("Id")
                        .HasName("PK_Price_Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("PriceLists");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfManufacture")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ImplementationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerPiece")
                        .HasColumnType("money");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Product_Id");

                    b.HasIndex("AccountingId");

                    b.HasIndex("ImplementationId");

                    b.HasIndex("StorageId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NameOfSuppliedRaw")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TIN")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_Provider_Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Raw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("PriceRaw")
                        .HasColumnType("money");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RawName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("Date");

                    b.HasKey("Id")
                        .HasName("PK_Raws_Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Raws");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountingId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nvarchar");

                    b.Property<int>("ImplementationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.Property<decimal>("Wage")
                        .HasColumnType("money");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Staff_Id");

                    b.HasIndex("AccountingId");

                    b.HasIndex("ImplementationId");

                    b.HasIndex("StorageId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccountCardId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("date");

                    b.Property<string>("StorageName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_Storage_Id");

                    b.HasIndex("AccountCardId")
                        .IsUnique();

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.TechnicalProcesses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RawId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfTheEvent")
                        .HasColumnType("Date");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_TechnicalProcesses_Id");

                    b.HasIndex("RawId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("TechnicalProcesses");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Workshop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProccesName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RawId")
                        .HasColumnType("int");

                    b.Property<string>("WorkshopName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Workshop_Id");

                    b.HasIndex("RawId");

                    b.ToTable("Workshops");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.WriteOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("nvarchar");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("QuntityProduct")
                        .HasColumnType("integer");

                    b.Property<DateTime>("WriteOffDate")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK_WriteOffs_Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("WriteOffs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Implementation", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.Storage", "Storage")
                        .WithMany("Implementations")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Implementations_StorageId_Storages_Id");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Order", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Orders_CliientId_Clients_Id");

                    b.HasOne("AccProductsEnt.Kuriev.Entities.Implementation", "Implementation")
                        .WithMany("Orders")
                        .HasForeignKey("ImplementationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Orders_ImplementationId_Implementations_Id");

                    b.Navigation("Client");

                    b.Navigation("Implementation");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Post", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.Staff", "Staff")
                        .WithOne("Post")
                        .HasForeignKey("AccProductsEnt.Kuriev.Entities.Post", "StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Staffs_PostId_Posts_Id");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.PriceList", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.Client", "Client")
                        .WithOne("PriceList")
                        .HasForeignKey("AccProductsEnt.Kuriev.Entities.PriceList", "ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Clients_PriceListId_PriceLists_Id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Product", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.Accounting", "Accounting")
                        .WithMany("Products")
                        .HasForeignKey("AccountingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Products_AccountingId_Accountings_Id");

                    b.HasOne("AccProductsEnt.Kuriev.Entities.Implementation", "Implementation")
                        .WithMany("Products")
                        .HasForeignKey("ImplementationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Products_ImplementationId_Implementations_Id");

                    b.HasOne("AccProductsEnt.Kuriev.Entities.Storage", "Storage")
                        .WithMany("Products")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Products_StorageId_Storages_Id");

                    b.HasOne("AccProductsEnt.Kuriev.Entities.Workshop", "Workshop")
                        .WithMany("Products")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Products_WorkcshopId_Workshops_Id");

                    b.Navigation("Accounting");

                    b.Navigation("Implementation");

                    b.Navigation("Storage");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Raw", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.Provider", "Provider")
                        .WithMany("Raws")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Raws_ProviderId_Provider_Id");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Staff", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.Accounting", "Accounting")
                        .WithMany("Staffs")
                        .HasForeignKey("AccountingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Staffs_AccountingId_Accountings_Id");

                    b.HasOne("AccProductsEnt.Kuriev.Entities.Implementation", "Implementation")
                        .WithMany("Staffs")
                        .HasForeignKey("ImplementationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Staffs_ImplementationId_Implementations_Id");

                    b.HasOne("AccProductsEnt.Kuriev.Entities.Storage", "Storage")
                        .WithMany("Staffs")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Staffs_StorageId_Storages_Id");

                    b.HasOne("AccProductsEnt.Kuriev.Entities.Workshop", "Workshop")
                        .WithMany("Staffs")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Staffs_WorkshopId_Workshops_Id");

                    b.Navigation("Accounting");

                    b.Navigation("Implementation");

                    b.Navigation("Storage");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Storage", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.AccountCard", "AccountCard")
                        .WithOne("Storage")
                        .HasForeignKey("AccProductsEnt.Kuriev.Entities.Storage", "AccountCardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_AccountCards_StorageId_Storages_Id");

                    b.Navigation("AccountCard");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.TechnicalProcesses", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.Raw", "Raw")
                        .WithMany("TechnicalProcesses")
                        .HasForeignKey("RawId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TechnicalProcesses_RawId_Raw_Id");

                    b.HasOne("AccProductsEnt.Kuriev.Entities.Workshop", "Workshop")
                        .WithMany("TechnicalProcesses")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_TechnicalProcesses_WorkshopId_Workshop_Id");

                    b.Navigation("Raw");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Workshop", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.Raw", "Raw")
                        .WithMany("Workshops")
                        .HasForeignKey("RawId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Workshops_RawId_Raws_Id");

                    b.Navigation("Raw");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.WriteOff", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.Product", "Product")
                        .WithOne("WriteOff")
                        .HasForeignKey("AccProductsEnt.Kuriev.Entities.WriteOff", "ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Products_WriteOffId_WriteOffs_Id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccProductsEnt.Kuriev.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AccProductsEnt.Kuriev.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.AccountCard", b =>
                {
                    b.Navigation("Storage")
                        .IsRequired();
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Accounting", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Client", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PriceList")
                        .IsRequired();
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Implementation", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Product", b =>
                {
                    b.Navigation("WriteOff")
                        .IsRequired();
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Provider", b =>
                {
                    b.Navigation("Raws");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Raw", b =>
                {
                    b.Navigation("TechnicalProcesses");

                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Staff", b =>
                {
                    b.Navigation("Post")
                        .IsRequired();
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Storage", b =>
                {
                    b.Navigation("Implementations");

                    b.Navigation("Products");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("AccProductsEnt.Kuriev.Entities.Workshop", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Staffs");

                    b.Navigation("TechnicalProcesses");
                });
#pragma warning restore 612, 618
        }
    }
}
